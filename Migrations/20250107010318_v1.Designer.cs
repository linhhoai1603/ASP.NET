// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectDotNET.Models;

#nullable disable

namespace ProjectDotNET.Migrations
{
    [DbContext(typeof(Shop_Context))]
    [Migration("20250107010318_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ColorsProducts", b =>
                {
                    b.Property<int>("Colorscolor_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("Colorscolor_id", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("ColorsProducts");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Brands", b =>
                {
                    b.Property<int>("brand_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<string>("brand_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("brandName");

                    b.HasKey("brand_id");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Categories", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productSpeId");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categoryName");

                    b.HasKey("category_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Colors", b =>
                {
                    b.Property<int>("color_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("colorId");

                    b.Property<string>("color_img")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("colorImg");

                    b.Property<string>("color_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("colorName");

                    b.Property<int>("product_id")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.HasKey("color_id");

                    b.ToTable("colors");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Order_Items", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderItemId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("orderItems");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("orderDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double")
                        .HasColumnName("totalAmount");

                    b.Property<int>("Userid")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("OrderId");

                    b.HasIndex("Userid");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Payments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("OrdersOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paymentDate");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("paymentMethod");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("ProjectDotNET.Models.ProductSpecifications", b =>
                {
                    b.Property<int>("ProductSpeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productSpeId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ram");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("resolution");

                    b.Property<string>("StorageCapacity")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("storageCapacity");

                    b.HasKey("ProductSpeId");

                    b.HasIndex("ProductId");

                    b.ToTable("productSpecifications");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brandId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("imgUrl");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("productName");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double")
                        .HasColumnName("unitPrice");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("userName");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Warehouses", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("warehouseId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("warehouseName");

                    b.HasKey("WarehouseId");

                    b.HasIndex("ProductId");

                    b.ToTable("warehouses");
                });

            modelBuilder.Entity("ColorsProducts", b =>
                {
                    b.HasOne("ProjectDotNET.Models.Colors", null)
                        .WithMany()
                        .HasForeignKey("Colorscolor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDotNET.Models.Products", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectDotNET.Models.Order_Items", b =>
                {
                    b.HasOne("ProjectDotNET.Models.Orders", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDotNET.Models.Products", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Orders", b =>
                {
                    b.HasOne("ProjectDotNET.Models.Users", "user")
                        .WithMany("Orders")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Payments", b =>
                {
                    b.HasOne("ProjectDotNET.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ProjectDotNET.Models.ProductSpecifications", b =>
                {
                    b.HasOne("ProjectDotNET.Models.Products", "Product")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Products", b =>
                {
                    b.HasOne("ProjectDotNET.Models.Brands", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDotNET.Models.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Warehouses", b =>
                {
                    b.HasOne("ProjectDotNET.Models.Products", "Product")
                        .WithMany("Warehouses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Brands", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Products", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductSpecifications");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("ProjectDotNET.Models.Users", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
